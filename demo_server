client - import socket
import time
from PIL import Image
from io import BytesIO
import PIL.Image

http_server_ip = "127.0.0.1"
http_server_port = 20820

redirected_server_ip = "127.0.0.1"
redirected_server_port = 8001

client_ip = "127.0.0.1"
client_port = 8002

def send_request():
    global client_ip, client_port
    print("Sending request to HTTP server...")

    # Create a TCP socket for the client
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect the client socket to the HTTP server
    client_socket.connect((http_server_ip, http_server_port))

    # Construct the HTTP request to the HTTP server
    http_request = f"GET /redirect HTTP/1.1\r\nHost: {http_server_ip}\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:92.0) Gecko/20100101 Firefox/92.0\r\n\r\n"

    # Send the request to the HTTP server
    client_socket.sendall(http_request.encode())

    # Add a delay of 2 seconds to give the server time to respond
    time.sleep(2)
# 
    # Receive the response from the HTTP server
    http_response_data = b""
    while True:
        data = client_socket.recv(4096)
        if not data:
            break
        http_response_data += data
# ///////////////////////////////////////////////////////////////////////////////
    # Close the client socket
    client_socket.close()

    # Handle the response from the HTTP server
    if http_response_data:
        print("Received response from HTTP server.")
        # Create a TCP socket for the client
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # Connect the client socket to the redirected server
        client_socket.connect((redirected_server_ip, redirected_server_port))

        # Construct the HTTP request to the redirected server
        redirected_request = f"GET / HTTP/1.1\r\nHost: {redirected_server_ip}\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0\r\nContent-Type: image/jpeg\r\nContent-Length: {len(http_response_data)}\r\n\r\n{http_response_data.decode()}"

        # Send the request to the redirected server
        client_socket.sendall(redirected_request.encode())

        # Receive the response from the redirected server
        redirected_response_data = b""
        while True:
            data = client_socket.recv(4096)
            if not data:
                break
            redirected_response_data += data

        # Close the client socket
        client_socket.close()

        try:
            # Try to create an image object from the received data
            image = Image.open(BytesIO(redirected_response_data))
            # The received data is a valid image
            # Further processing of the image can be done here
        except PIL.UnidentifiedImageError:
            print("Received data is not a valid image.")

    else:
        print("HTTP server did not respond.")

def main():
    send_request()

if __name__ == "__main__":
    main()
/////////////////////////////////////////////////////////////////////

http app 

import socket

http_server_ip = "127.0.0.1"
http_server_port = 20820

client_ip = None
client_port = 8002


def http_request_handler(client_sock, client_addr):
    global client_ip, client_port
    print("Received connection from:", client_addr)

    # Receive data from the client
    client_data = client_sock.recv(1024)

    if client_data:
        # Extract the HTTP request from the client data
        http_request = client_data.decode()

        if not client_ip or not client_port:
            client_ip = client_addr[0]
            client_port = client_addr[1]

        if http_request.startswith("GET"):
            print("Received GET request: {}".format(http_request))

            # Extract the requested path from the HTTP request
            path = http_request.split(" ")[1]

            if path == "/home/evyatar/Desktop/end project/image.jpg":
                # Send a GET request to the HTTP server to get the image
                http_request = "GET /image.jpg HTTP/1.1\r\nHost: {}\r\n\r\n".format(http_server_ip)
                server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                server_sock.connect((http_server_ip, http_server_port))
                server_sock.sendall(http_request.encode())

                # Receive the response from the HTTP server
                server_response = server_sock.recv(1024)

                if server_response:
                    
                    # Send the image to the client
                    client_sock.sendall(server_response)
                else:
                    # Return a 404 Not Found response
                    http_response = "HTTP/1.1 404 Not Found\r\n\r\n".encode()
                    client_sock.sendall(http_response)
            else:
                # Return a 404 Not Found response
                http_response = "HTTP/1.1 404 Not Found\r\n\r\n".encode()
                client_sock.sendall(http_response)
        else:
            # Return a 400 Bad Request response
            http_response = "HTTP/1.1 400 Bad Request\r\n\r\n".encode()
            client_sock.sendall(http_response)

        # Close the client socket
        client_sock.close()


def main():
    print("Starting HTTP server...")
    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_sock.bind(('localhost', 20820))
    server_sock.listen(1)

    while True:
        client_sock, client_addr = server_sock.accept()
        http_request_handler(client_sock, client_addr)


if __name__ == "__main__":
    main()
///////////////////////////////////////////////////////////////////

redirect 

from scapy.all import *
import time
import os

server_ip = "127.0.0.1"

if __name__ == '__main__':
    server_port = 8001  # server bind
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # bind the socket to a specific address and port
    server_address = ('127.0.0.1', server_port)
    print('starting up on {} port {}'.format(*server_address))
    sock.bind(server_address)

    # listen for incoming connections
    sock.listen(1)

    while True:
        # wait for a connection
        print('waiting for a connection')
        connection, client_address = sock.accept()
        try:
            print('connection from', client_address)

            # receive the request
            data = connection.recv(1024)

            # send the file
            file_path = "/home/evyatar/Desktop/end project/image.jpg"
            file_size = os.path.getsize(file_path)
            with open(file_path, "rb") as f:
                data = f.read(file_size)
                connection.sendall(data)

            print("done sending file")

        finally:
            # close the connection
            connection.close()
